% Carregamento de arquivos de imagens - treinamento e Validação
imdsT = imageDatastore('D:\pecege\TCC\learning\smaller\training\', ...
    'IncludeSubfolders',true, ...
    'LabelSource','foldernames');
imdsV = imageDatastore('D:\pecege\TCC\learning\smaller\validating\', ...
    'IncludeSubfolders',true, ...
    'LabelSource','foldernames');

% Divisão dos conjuntos em DataStores
imdsTrain = imdsT;
imdsValidation = imdsV;

%Escolha da rede pré-treinada
net = googlenet;

%Verificação tamanho dos inputs da rede pre treinada
inputSize = net.Layers(1).InputSize

%Inicio da substituição das últimas camadas
lgraph = layerGraph(net); 
numClasses = numel(categories(imdsTrain.Labels))
newLearnableLayer = fullyConnectedLayer(numClasses, ...
    'Name','new_fc', ...
    'WeightLearnRateFactor',10, ...
    'BiasLearnRateFactor',10);
    
lgraph = replaceLayer(lgraph,'loss3-classifier',newLearnableLayer);
newClassLayer = classificationLayer('Name','new_classoutput');
lgraph = replaceLayer(lgraph,'output',newClassLayer);

%Refatorando as imagens para atender caracteristicas da rede pre treinada
pixelRange = [-30 30];
imageAugmenter = imageDataAugmenter( ...
    'RandXReflection',true, ...
    'RandXTranslation',pixelRange, ...
    'RandYTranslation',pixelRange);
augimdsTrain = augmentedImageDatastore(inputSize(1:2),imdsTrain, ...
    'DataAugmentation',imageAugmenter,ColorPreprocessing="gray2rgb");
augimdsValidation = augmentedImageDatastore(inputSize(1:2),imdsValidation,ColorPreprocessing="gray2rgb");

%Opções de treinamento - hiperparâmetros
options = trainingOptions('sgdm', ...
    'MiniBatchSize',10, ...
    'MaxEpochs',10, ...
    'InitialLearnRate',1e-4, ...
    'Shuffle','every-epoch', ...
    'ValidationData',augimdsValidation, ...
    'ValidationFrequency',3, ...
    'Verbose',true, ...
    'Plots','training-progress');

%Clasificação de predição das imagens
[YPred,scores] = classify(netTransfer,augimdsValidation);

%Acurácia geral do conjunto de validação
YValidation = imdsValidation.Labels;
accuracy = mean(YPred == YValidation)

% Geração de gráfico com predição por categoria
[~,idx] = sort(scores,'descend');
idx = idx(12:-1:1);
classNamesTop = label;
scoresTop = scores(idx);

figure
barh(scoresTop)
% xlim([0.052 0.961])
% ylim([0.35 6.17])
title('Predictions Rank')
xlabel('Probability')
yticklabels(label)
grid on

